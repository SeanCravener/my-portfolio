"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = _interopRequireDefault(require("react"));
var _styledComponents = _interopRequireWildcard(require("@xstyled/styled-components"));
var _Button = _interopRequireDefault(require("../Button"));
var _Frame = _interopRequireDefault(require("../Frame/Frame"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
var OptionsBox = _styledComponents["default"].ul.withConfig({
  displayName: "TitleBar__OptionsBox",
  componentId: "sc-5cvtvn-0"
})(["\n  list-style: none;\n  padding: 0;\n  margin: 0;\n\n  display: flex;\n"]);
var Option = (0, _styledComponents["default"])(_Button["default"]).attrs({
  as: 'li'
}).withConfig({
  displayName: "TitleBar__Option",
  componentId: "sc-5cvtvn-1"
})(["\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  margin-left: 2;\n  padding: 0;\n\n  width: 17px;\n  height: 14px;\n\n  min-width: 0;\n  font-weight: 600;\n  font-size: 10;\n\n  &:active {\n    padding: 1 0 0 1;\n\n    outline: none;\n  }\n\n  &:first-child {\n    margin-right: 0;\n  }\n\n  &:focus {\n    box-shadow: inset 1px 1px 0px 1px ", ",\n      inset -1px -1px 0px 1px ", ";\n  }\n"], (0, _styledComponents.th)('colors.borderLightest'), (0, _styledComponents.th)('colors.borderDark'));
Option.displayName = 'Option';
var TitleBarBackground = (0, _styledComponents["default"])(_Frame["default"]).withConfig({
  displayName: "TitleBar__TitleBarBackground",
  componentId: "sc-5cvtvn-2"
})(["\n  height: 18;\n  margin-bottom: 2;\n\n  padding: 2;\n\n  display: flex;\n\n  box-shadow: none;\n\n  img {\n    width: 15;\n    height: 14;\n    margin-right: 4;\n  }\n\n  background: ", ";\n"], function (_ref) {
  var active = _ref.active,
    theme = _ref.theme;
  return active ? theme.colors.headerBackground : theme.colors.headerNotActiveBackground;
});
var Title = _styledComponents["default"].div.withConfig({
  displayName: "TitleBar__Title",
  componentId: "sc-5cvtvn-3"
})(["\n  flex-grow: 1;\n  font-weight: bold;\n  line-height: 1.4em;\n  margin: 0;\n  font-size: 1em;\n"]);
var TitleBarRenderer = function TitleBarRenderer(_ref2, ref) {
  var children = _ref2.children,
    _ref2$title = _ref2.title,
    title = _ref2$title === void 0 ? 'UNKNOWN.EXE' : _ref2$title,
    icon = _ref2.icon,
    _ref2$active = _ref2.active,
    active = _ref2$active === void 0 ? true : _ref2$active,
    className = _ref2.className;
  return /*#__PURE__*/_react["default"].createElement(TitleBarBackground, {
    active: active,
    color: active ? 'headerText' : 'headerNotActiveText',
    ref: ref
  }, icon && icon, /*#__PURE__*/_react["default"].createElement(Title, {
    className: className
  }, title), children);
};
var TitleBar = Object.assign( /*#__PURE__*/_react["default"].forwardRef(TitleBarRenderer), {
  Option: Option,
  OptionsBox: OptionsBox
});
var _default = TitleBar;
exports["default"] = _default;