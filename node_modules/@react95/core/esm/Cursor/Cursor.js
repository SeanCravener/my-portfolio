function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
import { css } from 'styled-components';
import NwseResize from './cursors/AngleUpLeft.png';
import NeswResize from './cursors/AngleUpRight.png';
import Progress from './cursors/AppStarting.png';
import Auto from './cursors/Arrow.png';
import NoDrop from './cursors/Circle.png';
import ColResize from './cursors/ColRezise.png';
import Copy from './cursors/Copy.png';
import Crosshair from './cursors/Cross.png';
import SResize from './cursors/DownArrow.png';
import SwResize from './cursors/DownLeftArrow.png';
import SeResize from './cursors/DownRightArrow.png';
import Grab from './cursors/Hand.png';
import Pointer from './cursors/HandPointer.png';
import Grabbing from './cursors/Handsqueezed.png';
import Help from './cursors/Help.png';
import WResize from './cursors/LeftArrow.png';
import EwResize from './cursors/LeftRight.png';
import Alias from './cursors/Link.png';
import Move from './cursors/Move.png';
import NotAllowed from './cursors/NO.png';
import EResize from './cursors/RightArrow.png';
import RowResize from './cursors/RowResize.png';
import Text from './cursors/Text.png';
import NResize from './cursors/UpArrow.png';
import NsResize from './cursors/UpDownArrow.png';
import NwResize from './cursors/UpLeftArrow.png';
import NeResize from './cursors/UpRightArrow.png';
import VerticalText from './cursors/VText.png';
import Wait from './cursors/Wait.png';
import ZoomIn from './cursors/ZoomIn.png';
import ZoomOut from './cursors/ZoomOut.png';
var cursors = {
  Auto: Auto,
  Text: Text,
  VerticalText: VerticalText,
  Help: Help,
  Crosshair: Crosshair,
  Pointer: Pointer,
  Progress: Progress,
  Wait: Wait,
  Alias: Alias,
  Copy: Copy,
  Move: Move,
  None: null,
  NoDrop: NoDrop,
  NotAllowed: NotAllowed,
  Grab: Grab,
  Grabbing: Grabbing,
  ColResize: ColResize,
  RowResize: RowResize,
  NResize: NResize,
  EResize: EResize,
  SResize: SResize,
  WResize: WResize,
  NsResize: NsResize,
  EwResize: EwResize,
  NeResize: NeResize,
  NwResize: NwResize,
  SeResize: SeResize,
  SwResize: SwResize,
  NeswResize: NeswResize,
  NwseResize: NwseResize,
  ZoomIn: ZoomIn,
  ZoomOut: ZoomOut
};
var toKebabCase = function toKebabCase(str) {
  return "".concat(str.charAt(0).toLowerCase()).concat(str.substring(1)).replace(/[A-Z]/g, function (letter) {
    return "-".concat(letter.toLowerCase());
  });
};
var Cursor = Object.keys(cursors).reduce(function (all, cur) {
  return Object.assign(all, _defineProperty({}, cur, css(["\n        cursor: ", " ", ";\n      "], cursors[cur] && "url(".concat(cursors[cur], "), "), toKebabCase(cur))));
}, {});
export default Cursor;