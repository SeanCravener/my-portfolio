{"ast":null,"code":"var DEV = process.env.NODE_ENV !== \"production\";\nvar specialProperties = [\"__proto__\", \"constructor\", \"prototype\"];\nvar identity = function identity(x) {\n  return x;\n};\nvar is = function is(n) {\n  return n !== void 0 && n !== null;\n};\nvar num = function num(n) {\n  return typeof n === \"number\" && !Number.isNaN(n);\n};\nvar string = function string(n) {\n  return typeof n === \"string\" && n !== \"\";\n};\nvar obj = function obj(n) {\n  return typeof n === \"object\" && n !== null;\n};\nvar func = function func(n) {\n  return typeof n === \"function\";\n};\nvar negative = function negative(n) {\n  return num(n) && n < 0;\n};\nvar get = function get(from, path) {\n  var paths = String(path).split(\".\");\n  var pathsLength = paths.length;\n  var result = from;\n  for (var i = 0; i < pathsLength; i += 1) {\n    if (!is(result)) return result;\n    var path2 = paths[i];\n    result = is(result[path2]) ? result[path2] : void 0;\n  }\n  return result;\n};\nvar assign = function assign(target, source) {\n  if (!is(source)) return target;\n  for (var key in source) {\n    if (specialProperties.indexOf(key) !== -1) {\n      continue;\n    }\n    target[key] = source[key];\n  }\n  return target;\n};\nvar merge = function merge(target, source) {\n  if (!is(source)) return target;\n  for (var key in source) {\n    if (specialProperties.indexOf(key) !== -1) {\n      continue;\n    }\n    if (obj(target[key])) {\n      target[key] = merge(assign({}, target[key]), source[key]);\n    } else {\n      target[key] = source[key];\n    }\n  }\n  return target;\n};\nvar warn = function warn(condition, message) {\n  if (DEV) {\n    if (!condition && console.error) {\n      console.error(message);\n    }\n  }\n};\nfunction cascade(value, arg) {\n  if (typeof value === \"function\") {\n    return cascade(value(arg), arg);\n  }\n  return value;\n}\nvar getThemeValue = function getThemeValue(props, path) {\n  var initial = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : props.theme;\n  return cascade(get(initial, path), props);\n};\nfunction omit(object, values) {\n  var result = {};\n  for (var key in object) {\n    if (values.indexOf(key) === -1) {\n      result[key] = object[key];\n    }\n  }\n  return result;\n}\nfunction flattenStrings(array) {\n  return array.reduce(function (flattenedArray, value) {\n    var lastIndex = flattenedArray.length - 1;\n    var last = flattenedArray[lastIndex];\n    if (typeof last === \"string\" && typeof value === \"string\") {\n      flattenedArray[lastIndex] = last + value;\n    } else {\n      flattenedArray.push(value);\n    }\n    return flattenedArray;\n  }, []);\n}\nfunction flattenDown(array, result) {\n  for (var i = 0; i < array.length; i++) {\n    var value = array[i];\n    if (Array.isArray(value)) {\n      flattenDown(value, result);\n    } else {\n      result.push(value);\n    }\n  }\n  return result;\n}\nfunction flatten(array) {\n  return flattenDown(array, []);\n}\nexport { assign, cascade, flatten, flattenStrings, func, get, getThemeValue, identity, is, merge, negative, num, obj, omit, string, warn };","map":{"version":3,"names":["DEV","process","env","NODE_ENV","specialProperties","identity","x","is","n","num","Number","isNaN","string","obj","func","negative","get","from","path","paths","String","split","pathsLength","length","result","i","path2","assign","target","source","key","indexOf","merge","warn","condition","message","console","error","cascade","value","arg","getThemeValue","props","initial","arguments","undefined","theme","omit","object","values","flattenStrings","array","reduce","flattenedArray","lastIndex","last","push","flattenDown","Array","isArray","flatten"],"sources":["/Users/Kiki/Desktop/Sean Mac/Github/my-portfolio/node_modules/@xstyled/util/src/index.ts"],"sourcesContent":["import { Props, Path } from './types'\n\nexport * from './types'\n\nconst DEV = process.env.NODE_ENV !== 'production'\n\nconst specialProperties = ['__proto__', 'constructor', 'prototype']\n/**\n * Identity function.\n */\nexport const identity = <T>(x: T): T => x\n\n/**\n * Check if a value is not null and not undefined.\n */\nexport const is = <T>(n: T): n is Exclude<T, undefined | null> =>\n  n !== undefined && n !== null\n\n/**\n * Check if a value is a number.\n */\nexport const num = (n: unknown): n is number =>\n  typeof n === 'number' && !Number.isNaN(n)\n\n/**\n * Check if a value is a string.\n */\nexport const string = (n: unknown): n is Exclude<string, ''> =>\n  typeof n === 'string' && n !== ''\n\n/**\n * Check if a value is an object.\n */\nexport const obj = (\n  n: unknown,\n): n is { [key: string]: unknown; [key: number]: unknown } =>\n  typeof n === 'object' && n !== null\n\n/**\n * Check if a value is a function.\n */\nexport const func = (n: unknown): n is Function => typeof n === 'function'\n\n/**\n * Check if a value is a negative number.\n */\nexport const negative = (n: unknown): n is number => num(n) && n < 0\n\n/**\n * Get a value from an object or an array.\n */\nexport const get = (from: unknown, path: Path): unknown => {\n  const paths = String(path).split('.')\n  const pathsLength = paths.length\n  let result: any = from\n  for (let i = 0; i < pathsLength; i += 1) {\n    if (!is(result)) return result\n    const path = paths[i]\n    result = is(result[path]) ? result[path] : undefined\n  }\n  return result\n}\n\n/**\n * Assign object into another\n */\nexport const assign = <T, U>(target: T, source: U): T & U => {\n  if (!is(source)) return target as T & U\n  for (const key in source) {\n    if (specialProperties.indexOf(key) !== -1) {\n      continue\n    }\n    // @ts-ignore\n    target[key] = source[key]\n  }\n  return target as T & U\n}\n\n/**\n * Merge deeply one object into another.\n */\nexport const merge = <T, U>(target: T, source: U): T & U => {\n  if (!is(source)) return target as T & U\n  for (const key in source) {\n    if (specialProperties.indexOf(key) !== -1) {\n      continue\n    }\n    // @ts-ignore\n    if (obj(target[key])) {\n      // @ts-ignore\n      target[key] = merge(assign({}, target[key]), source[key])\n    } else {\n      // @ts-ignore\n      target[key] = source[key]\n    }\n  }\n  return target as T & U\n}\n\n/**\n * Warn if a condition is not met.\n */\nexport const warn = (condition: boolean, message: string): void => {\n  if (DEV) {\n    if (!condition && console.error) {\n      console.error(message)\n    }\n  }\n}\n\n/**\n * Recursively call a function until getting something that is not a function.\n */\nexport function cascade(value: unknown, arg?: unknown): Exclude<any, Function> {\n  if (typeof value === 'function') {\n    return cascade(value(arg), arg)\n  }\n  return value\n}\n\n/**\n * Get value from theme.\n */\nexport const getThemeValue = <T extends Props>(\n  props: T,\n  path: Path,\n  initial: unknown = props.theme,\n): unknown => cascade(get(initial, path), props)\n\n/**\n * Omit values from an object.\n */\nexport function omit<T extends { [key: string]: unknown }, K extends string[]>(\n  object: T,\n  values: K,\n): Pick<T, Exclude<keyof T, K[number]>> {\n  const result: { [key: string]: unknown } = {}\n  for (const key in object) {\n    if (values.indexOf(key) === -1) {\n      result[key] = object[key]\n    }\n  }\n  return result as Pick<T, Exclude<keyof T, K[number]>>\n}\n\n/**\n * Flatten every string together in an array.\n */\nexport function flattenStrings(array: any[]): any[] {\n  return array.reduce((flattenedArray, value) => {\n    const lastIndex = flattenedArray.length - 1\n    const last = flattenedArray[lastIndex]\n    if (typeof last === 'string' && typeof value === 'string') {\n      flattenedArray[lastIndex] = last + value\n    } else {\n      flattenedArray.push(value)\n    }\n    return flattenedArray\n  }, [])\n}\n\nfunction flattenDown(array: any[], result: any[]) {\n  for (let i = 0; i < array.length; i++) {\n    const value = array[i]\n\n    if (Array.isArray(value)) {\n      flattenDown(value, result)\n    } else {\n      result.push(value)\n    }\n  }\n\n  return result\n}\n\n/**\n * Flatten an array.\n */\nexport function flatten(array: any[]): any[] {\n  return flattenDown(array, [])\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}